// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: event.proto

package Event_PB

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoutineId     string                 `protobuf:"bytes,1,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoEvent) Reset() {
	*x = GoEvent{}
	mi := &file_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoEvent) ProtoMessage() {}

func (x *GoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoEvent.ProtoReflect.Descriptor instead.
func (*GoEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *GoEvent) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

func (x *GoEvent) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ChanEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChanId        string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Direction     string                 `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	Payload       []byte                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChanEvent) Reset() {
	*x = ChanEvent{}
	mi := &file_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChanEvent) ProtoMessage() {}

func (x *ChanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChanEvent.ProtoReflect.Descriptor instead.
func (*ChanEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *ChanEvent) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

func (x *ChanEvent) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ChanEvent) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ChanEvent) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TimerEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimerId       string                 `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Action        string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Duration      int64                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	ReturnedTime  int64                  `protobuf:"varint,5,opt,name=returned_time,json=returnedTime,proto3" json:"returned_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimerEvent) Reset() {
	*x = TimerEvent{}
	mi := &file_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerEvent) ProtoMessage() {}

func (x *TimerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerEvent.ProtoReflect.Descriptor instead.
func (*TimerEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *TimerEvent) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

func (x *TimerEvent) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *TimerEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TimerEvent) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TimerEvent) GetReturnedTime() int64 {
	if x != nil {
		return x.ReturnedTime
	}
	return 0
}

type MutexEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MutexId       string                 `protobuf:"bytes,1,opt,name=mutex_id,json=mutexId,proto3" json:"mutex_id,omitempty"`
	Op            string                 `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutexEvent) Reset() {
	*x = MutexEvent{}
	mi := &file_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutexEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutexEvent) ProtoMessage() {}

func (x *MutexEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutexEvent.ProtoReflect.Descriptor instead.
func (*MutexEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *MutexEvent) GetMutexId() string {
	if x != nil {
		return x.MutexId
	}
	return ""
}

func (x *MutexEvent) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to EventType:
	//
	//	*Event_Go
	//	*Event_Chan
	//	*Event_Mutex
	//	*Event_Timer
	EventType     isEvent_EventType `protobuf_oneof:"event_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *Event) GetEventType() isEvent_EventType {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *Event) GetGo() *GoEvent {
	if x != nil {
		if x, ok := x.EventType.(*Event_Go); ok {
			return x.Go
		}
	}
	return nil
}

func (x *Event) GetChan() *ChanEvent {
	if x != nil {
		if x, ok := x.EventType.(*Event_Chan); ok {
			return x.Chan
		}
	}
	return nil
}

func (x *Event) GetMutex() *MutexEvent {
	if x != nil {
		if x, ok := x.EventType.(*Event_Mutex); ok {
			return x.Mutex
		}
	}
	return nil
}

func (x *Event) GetTimer() *TimerEvent {
	if x != nil {
		if x, ok := x.EventType.(*Event_Timer); ok {
			return x.Timer
		}
	}
	return nil
}

type isEvent_EventType interface {
	isEvent_EventType()
}

type Event_Go struct {
	Go *GoEvent `protobuf:"bytes,10,opt,name=go,proto3,oneof"`
}

type Event_Chan struct {
	Chan *ChanEvent `protobuf:"bytes,11,opt,name=chan,proto3,oneof"`
}

type Event_Mutex struct {
	Mutex *MutexEvent `protobuf:"bytes,12,opt,name=mutex,proto3,oneof"`
}

type Event_Timer struct {
	Timer *TimerEvent `protobuf:"bytes,13,opt,name=timer,proto3,oneof"`
}

func (*Event_Go) isEvent_EventType() {}

func (*Event_Chan) isEvent_EventType() {}

func (*Event_Mutex) isEvent_EventType() {}

func (*Event_Timer) isEvent_EventType() {}

type EventBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*Event               `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBatch) Reset() {
	*x = EventBatch{}
	mi := &file_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBatch) ProtoMessage() {}

func (x *EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBatch.ProtoReflect.Descriptor instead.
func (*EventBatch) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *EventBatch) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

const file_event_proto_rawDesc = "" +
	"\n" +
	"\vevent.proto\x12\aEventPB\":\n" +
	"\aGoEvent\x12\x1d\n" +
	"\n" +
	"routine_id\x18\x01 \x01(\tR\troutineId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\"n\n" +
	"\tChanEvent\x12\x17\n" +
	"\achan_id\x18\x01 \x01(\tR\x06chanId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12\x1c\n" +
	"\tdirection\x18\x03 \x01(\tR\tdirection\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\"\x92\x01\n" +
	"\n" +
	"TimerEvent\x12\x19\n" +
	"\btimer_id\x18\x01 \x01(\tR\atimerId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x03R\bduration\x12#\n" +
	"\rreturned_time\x18\x05 \x01(\x03R\freturnedTime\"7\n" +
	"\n" +
	"MutexEvent\x12\x19\n" +
	"\bmutex_id\x18\x01 \x01(\tR\amutexId\x12\x0e\n" +
	"\x02op\x18\x02 \x01(\tR\x02op\"\xbd\x01\n" +
	"\x05Event\x12\"\n" +
	"\x02go\x18\n" +
	" \x01(\v2\x10.EventPB.GoEventH\x00R\x02go\x12(\n" +
	"\x04chan\x18\v \x01(\v2\x12.EventPB.ChanEventH\x00R\x04chan\x12+\n" +
	"\x05mutex\x18\f \x01(\v2\x13.EventPB.MutexEventH\x00R\x05mutex\x12+\n" +
	"\x05timer\x18\r \x01(\v2\x13.EventPB.TimerEventH\x00R\x05timerB\f\n" +
	"\n" +
	"event_type\"4\n" +
	"\n" +
	"EventBatch\x12&\n" +
	"\x06events\x18\x01 \x03(\v2\x0e.EventPB.EventR\x06eventsB\x11Z\x0f/proto;Event_PBb\x06proto3"

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData []byte
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)))
	})
	return file_event_proto_rawDescData
}

var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_event_proto_goTypes = []any{
	(*GoEvent)(nil),    // 0: EventPB.GoEvent
	(*ChanEvent)(nil),  // 1: EventPB.ChanEvent
	(*TimerEvent)(nil), // 2: EventPB.TimerEvent
	(*MutexEvent)(nil), // 3: EventPB.MutexEvent
	(*Event)(nil),      // 4: EventPB.Event
	(*EventBatch)(nil), // 5: EventPB.EventBatch
}
var file_event_proto_depIdxs = []int32{
	0, // 0: EventPB.Event.go:type_name -> EventPB.GoEvent
	1, // 1: EventPB.Event.chan:type_name -> EventPB.ChanEvent
	3, // 2: EventPB.Event.mutex:type_name -> EventPB.MutexEvent
	2, // 3: EventPB.Event.timer:type_name -> EventPB.TimerEvent
	4, // 4: EventPB.EventBatch.events:type_name -> EventPB.Event
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_event_proto_msgTypes[4].OneofWrappers = []any{
		(*Event_Go)(nil),
		(*Event_Chan)(nil),
		(*Event_Mutex)(nil),
		(*Event_Timer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
